"""Mdblist content module"""
from program.media import MediaItem, MediaItemContainer, MediaItemState
from utils.settings import settings_manager
from utils.logger import logger
from utils.request import get


class Content:
    """Content class for mdblist"""

    def __init__(
        self,
    ):
        self.settings = "content_overseerr"
        self.class_settings = settings_manager.get(self.settings)

    def update_items(self, media_items: MediaItemContainer):
        """Fetch media from mdblist and add them to media_items attribute
        if they are not already there"""
        fetched_items = self.get_items_from_overseerr()
        added_items = 0
        for fetched_item in fetched_items:
            if fetched_item not in media_items:
                media_items.append(fetched_item)
                added_items += 1
                logger.debug("Added '%s'", fetched_item.title)
        if added_items > 0:
            logger.info("Found %s new items", added_items)

    def get_items_from_overseerr(self) -> MediaItemContainer:
        """Fetch media from overseerr"""
        response = get_requests(
            self.class_settings["url"], self.class_settings["api_key"], 100
        )
        media_item_container = MediaItemContainer()
        for fetched_item in response["results"]:
            if fetched_item["type"] == "tv":
                fetched_item["type"] = "show"
                fetched_item["tmdb_id"] = fetched_item["media"]["tmdbId"]
                fetched_item["tvdb_id"] = fetched_item["media"]["tvdbId"]
                fetched_item["imdb_id"] = fetched_item["media"]["imdbId"]



            pass
        return media_item_container

    # Mdblist api method wrappers


def get_requests(overseerr_url: str, api_key: str, amount: int) -> dict:
    """Wrapper for overseerr api method get_requests"""
    return get(
        overseerr_url + f"/api/v1/request?take={amount}",
        additional_headers={"X-Api-Key": api_key},
    )
